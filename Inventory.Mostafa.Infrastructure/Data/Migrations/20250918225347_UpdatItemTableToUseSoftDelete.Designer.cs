// <auto-generated />
using System;
using Inventory.Mostafa.Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Inventory.Mostafa.Infrastructure.Data.Migrations
{
    [DbContext(typeof(InventoryDbContext))]
    [Migration("20250918225347_UpdatItemTableToUseSoftDelete")]
    partial class UpdatItemTableToUseSoftDelete
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Inventory.Mostafa.Domain.Entities.CustodayTables.Custoday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RecipientsId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecipientsId");

                    b.HasIndex("UnitId");

                    b.ToTable("Custodays");
                });

            modelBuilder.Entity("Inventory.Mostafa.Domain.Entities.CustodayTables.CustodyItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustodyId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustodyId");

                    b.HasIndex("ItemId");

                    b.ToTable("CustodyItems");
                });

            modelBuilder.Entity("Inventory.Mostafa.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Inventory.Mostafa.Domain.Entities.Identity.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UnitName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Inventory.Mostafa.Domain.Entities.Items", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ItemsName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StockNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Inventory.Mostafa.Domain.Entities.Opening.OpeningSerialNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OpeningStockId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OpeningStockId");

                    b.ToTable("OpeningSerialNumbers");
                });

            modelBuilder.Entity("Inventory.Mostafa.Domain.Entities.Opening.OpeningStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ItemsId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemsId");

                    b.ToTable("OpeningStocks");
                });

            modelBuilder.Entity("Inventory.Mostafa.Domain.Entities.Order.ItemSerialNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsReleased")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderItemsId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemsId");

                    b.ToTable("ItemSerialNumbers");
                });

            modelBuilder.Entity("Inventory.Mostafa.Domain.Entities.Order.OrderItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConsumedQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ItemsId")
                        .HasColumnType("int");

                    b.Property<int?>("OrdersId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("StockNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemsId");

                    b.HasIndex("OrdersId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Inventory.Mostafa.Domain.Entities.Order.Orders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderType")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SupplierName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Inventory.Mostafa.Domain.Entities.Recipients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("Recipients");
                });

            modelBuilder.Entity("Inventory.Mostafa.Domain.Entities.Store.ReleaseItemSerialNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreReleaseItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreReleaseItemId");

                    b.ToTable("ReleaseItemSerialNumbers");
                });

            modelBuilder.Entity("Inventory.Mostafa.Domain.Entities.Store.StockTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BalanceAfter")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemsId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RelatedId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("OrderItemsId");

                    b.ToTable("StockTransactions");
                });

            modelBuilder.Entity("Inventory.Mostafa.Domain.Entities.Store.StoreRelease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipientsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReleaseId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecipientsId");

                    b.HasIndex("UnitId");

                    b.ToTable("StoreReleases");
                });

            modelBuilder.Entity("Inventory.Mostafa.Domain.Entities.Store.StoreReleaseItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("StoreReleaseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("StoreReleaseId");

                    b.ToTable("StoreReleaseItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Inventory.Mostafa.Domain.Entities.CustodayTables.Custoday", b =>
                {
                    b.HasOne("Inventory.Mostafa.Domain.Entities.Recipients", "Recipients")
                        .WithMany("Custodays")
                        .HasForeignKey("RecipientsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Inventory.Mostafa.Domain.Entities.Identity.Unit", "Unit")
                        .WithMany("Custodays")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Recipients");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Inventory.Mostafa.Domain.Entities.CustodayTables.CustodyItem", b =>
                {
                    b.HasOne("Inventory.Mostafa.Domain.Entities.CustodayTables.Custoday", "Custody")
                        .WithMany("CustodyItems")
                        .HasForeignKey("CustodyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inventory.Mostafa.Domain.Entities.Items", "Item")
                        .WithMany("CustodyItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Custody");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Inventory.Mostafa.Domain.Entities.Opening.OpeningSerialNumber", b =>
                {
                    b.HasOne("Inventory.Mostafa.Domain.Entities.Opening.OpeningStock", "OpeningStock")
                        .WithMany("SerialNumbers")
                        .HasForeignKey("OpeningStockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OpeningStock");
                });

            modelBuilder.Entity("Inventory.Mostafa.Domain.Entities.Opening.OpeningStock", b =>
                {
                    b.HasOne("Inventory.Mostafa.Domain.Entities.Items", "Items")
                        .WithMany("OpeningStocks")
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Items");
                });

            modelBuilder.Entity("Inventory.Mostafa.Domain.Entities.Order.ItemSerialNumber", b =>
                {
                    b.HasOne("Inventory.Mostafa.Domain.Entities.Order.OrderItems", "OrderItems")
                        .WithMany("SerialNumbers")
                        .HasForeignKey("OrderItemsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Inventory.Mostafa.Domain.Entities.Order.OrderItems", b =>
                {
                    b.HasOne("Inventory.Mostafa.Domain.Entities.Items", "Items")
                        .WithMany("OrderItems")
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Inventory.Mostafa.Domain.Entities.Order.Orders", "Orders")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Items");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Inventory.Mostafa.Domain.Entities.Recipients", b =>
                {
                    b.HasOne("Inventory.Mostafa.Domain.Entities.Identity.Unit", "Unit")
                        .WithMany("Recipients")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Inventory.Mostafa.Domain.Entities.Store.ReleaseItemSerialNumber", b =>
                {
                    b.HasOne("Inventory.Mostafa.Domain.Entities.Store.StoreReleaseItem", "StoreReleaseItem")
                        .WithMany("SerialNumbers")
                        .HasForeignKey("StoreReleaseItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreReleaseItem");
                });

            modelBuilder.Entity("Inventory.Mostafa.Domain.Entities.Store.StockTransaction", b =>
                {
                    b.HasOne("Inventory.Mostafa.Domain.Entities.Items", "Items")
                        .WithMany("StockTransactions")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Inventory.Mostafa.Domain.Entities.Order.OrderItems", "OrderItems")
                        .WithMany("StockTransactions")
                        .HasForeignKey("OrderItemsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Items");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Inventory.Mostafa.Domain.Entities.Store.StoreRelease", b =>
                {
                    b.HasOne("Inventory.Mostafa.Domain.Entities.Recipients", "Recipients")
                        .WithMany("StoreReleases")
                        .HasForeignKey("RecipientsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Inventory.Mostafa.Domain.Entities.Identity.Unit", "Unit")
                        .WithMany("StoreReleases")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Recipients");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Inventory.Mostafa.Domain.Entities.Store.StoreReleaseItem", b =>
                {
                    b.HasOne("Inventory.Mostafa.Domain.Entities.Items", "Items")
                        .WithMany("StoreReleaseItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Inventory.Mostafa.Domain.Entities.Order.Orders", "Order")
                        .WithMany("StoreReleaseItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Inventory.Mostafa.Domain.Entities.Store.StoreRelease", "StoreRelease")
                        .WithMany("StoreReleaseItems")
                        .HasForeignKey("StoreReleaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Items");

                    b.Navigation("Order");

                    b.Navigation("StoreRelease");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Inventory.Mostafa.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Inventory.Mostafa.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inventory.Mostafa.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Inventory.Mostafa.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Inventory.Mostafa.Domain.Entities.CustodayTables.Custoday", b =>
                {
                    b.Navigation("CustodyItems");
                });

            modelBuilder.Entity("Inventory.Mostafa.Domain.Entities.Identity.Unit", b =>
                {
                    b.Navigation("Custodays");

                    b.Navigation("Recipients");

                    b.Navigation("StoreReleases");
                });

            modelBuilder.Entity("Inventory.Mostafa.Domain.Entities.Items", b =>
                {
                    b.Navigation("CustodyItems");

                    b.Navigation("OpeningStocks");

                    b.Navigation("OrderItems");

                    b.Navigation("StockTransactions");

                    b.Navigation("StoreReleaseItems");
                });

            modelBuilder.Entity("Inventory.Mostafa.Domain.Entities.Opening.OpeningStock", b =>
                {
                    b.Navigation("SerialNumbers");
                });

            modelBuilder.Entity("Inventory.Mostafa.Domain.Entities.Order.OrderItems", b =>
                {
                    b.Navigation("SerialNumbers");

                    b.Navigation("StockTransactions");
                });

            modelBuilder.Entity("Inventory.Mostafa.Domain.Entities.Order.Orders", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("StoreReleaseItems");
                });

            modelBuilder.Entity("Inventory.Mostafa.Domain.Entities.Recipients", b =>
                {
                    b.Navigation("Custodays");

                    b.Navigation("StoreReleases");
                });

            modelBuilder.Entity("Inventory.Mostafa.Domain.Entities.Store.StoreRelease", b =>
                {
                    b.Navigation("StoreReleaseItems");
                });

            modelBuilder.Entity("Inventory.Mostafa.Domain.Entities.Store.StoreReleaseItem", b =>
                {
                    b.Navigation("SerialNumbers");
                });
#pragma warning restore 612, 618
        }
    }
}
